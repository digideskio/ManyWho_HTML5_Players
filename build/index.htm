<!DOCTYPE html>
<html lang="en">
<head>
    <title>ManyWho Developer Tools</title>
    <style type="text/css" media="screen">

        body {
            background-color: #000000;
        }

        input {
            margin-bottom: 0px !important;
        }

        textarea {
            margin-bottom: 0px !important;
        }

        select {
            margin-bottom: 0px !important;
        }

        .manywho-field-label {
            margin-left: 4px !important;
        }

        .manywho-wait {
            position: absolute;
            top: 120px;
            left: 50%; 
            width: 250px;
            margin-left: -125px;
        }

        .manwho-form-field-actions {
            padding-bottom: 5px;
        }

        .manywho-field {
            display: inline-block;
            margin-right: 5px;
        }

        .manywho-runtime-field-required > div > label {
            font-weight: bold !important;
        }

        .manywho-runtime-field-required > div > label:after {
            color: #ff0000;
            content: ' *';
            display:inline;
        }

        #player-editor { 
            position: absolute;
            top: 170px;
            left: 0px;
            right: 0px;
            bottom: 0px;
        }

        #rest-toolbar {
            margin-left: 10px;
        }

        #player-toolbar {
            margin-left: 10px;
        }

        #rest-editor { 
            position: absolute;
            top: 170px;
            left: 0px;
            right: 0px;
            bottom: 0px;
            width: 50%;
        }

        #rest-response { 
            position: absolute;
            top: 170px;
            left: 50%;
            right: 0px;
            bottom: 0px;
        }

    </style>

    <link type="text/css" href="/extensions/bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen" />
    <link type="text/css" href="/extensions/bootstrap/css/bootstrap-responsive.css" rel="stylesheet" />

    <link type="text/css" href="/extensions/bootstrap-modal/css/bootstrap-modal.css" rel="stylesheet" />

    <link type="text/css" href="/extensions/bootstrap/css/darkstrap-v0.9.0.css" rel="stylesheet" media="screen" />
    
    <script type="text/javascript" src="/extensions/ace/ace.js" charset="utf-8"></script>
    <script type="text/javascript" src="/extensions/ace/mode-json.js" charset="utf-8"></script>

    <script type="text/javascript" src="/extensions/jquery/js/jquery-1.8.3.js"></script>
    <script type="text/javascript" src="/extensions/jquery/extensions/jquery.query-2.1.7.js"></script>

    <script type="text/javascript" src="/extensions/bootstrap/js/bootstrap.min.js"></script>

    <script type="text/javascript" src="/extensions/bootstrap-modal/js/bootstrap-modal.js"></script>
    <script type="text/javascript" src="/extensions/bootstrap-modal/js/bootstrap-modalmanager.js"></script>

    <script type="text/javascript" src="/extensions/cookie/jquery.cookie.js"></script>

    <script type="text/javascript" src="/build/js/manywho.sharedServices.js"></script>

    <script type="text/javascript" src="/js/manywho.constants.aspx"></script>
    <script type="text/javascript" src="/js/manywho.logging.js"></script>
    <script type="text/javascript" src="/js/manywho.ajax.js"></script>
    <script type="text/javascript" src="/js/manywho.utils.js"></script>
    <script type="text/javascript" src="/js/manywho.flow.js"></script>

    <script type="text/javascript" src="/js/tag/manywho.tag.formEditor.js"></script>
    <script type="text/javascript" src="/js/jquery.manywho.formBootStrap.js"></script>

    <script type="text/javascript" src="/run/js/manywho.runtime.engine.js"></script>

    <script>

        var restEditor = null;
        var restResponse = null;
        var playerEditor = null;

        function setFlowId(flowId) {
            if (flowId == null) {
                flowId = '';
            }

            $('#manywho-flow-id').val(flowId);
        }

        function getFlowId() {
            var flowId = null;

            flowId = $('#manywho-flow-id').val();

            if (flowId == null ||
                flowId.trim().length == 0) {
                flowId = '{flowId}';
            }

            return flowId;
        }

        function setEditingToken(editingToken) {
            if (editingToken == null) {
                editingToken = '';
            }

            $('#manywho-editing-session-id').val(editingToken);
        }

        function getEditingToken() {
            var editingToken = null;

            editingToken = $('#manywho-editing-session-id').val();

            if (editingToken == null ||
                editingToken.trim().length == 0) {
                editingToken = '{editingToken}';
            }

            return editingToken;
        }

        function getModelBuilderQuery() {
            var query = null;

            query = '';
            query += '{\n';
            query += '  "search":null,\n';
            query += '  "comparisionType":"AND",\n';
            query += '  "limit":50,\n';
            query += '  "size":50,\n';
            query += '  "orderBy":null,\n';
            query += '  "orderDirection":"ASC",\n';
            query += '  "flowId":null,\n';
            query += '  "isSnapShot":false,\n';
            query += '  "where":[\n';
            query += '    {\n';
            query += '      "columnName":null,\n';
            query += '      "criteria":null,\n';
            query += '      "contentValue":null\n';
            query += '    }\n';
            query += '  ]\n';
            query += '}';

            return query;
        }

        function executePlayerRequest() {
            var playerName = $('#player-name').val();

            if (playerName == null ||
                playerName.trim().length == 0) {
                alert('You need to give your player a web friendly name!');
            } else {
                var requestUrl = ManyWhoConstants.BASE_PATH_URL + '/' + ManyWhoSharedServices.getTenantId() + '/play/' + $('#player-name').val();
                var requestType = 'GET';
                var requestData = playerEditor.getValue();

                ManyWhoAjax.callGetRequest('REST.executePlayerRequest', requestUrl, requestType, requestData, 'html', executePlayerRequestSuccess);
            }
        }

        function executePlayerRequestSuccess(data, status, xhr) {
            playerEditor.setValue(data);
            playerEditor.gotoLine(0);
        }

        function executeREST() {
            var requestUrl = ManyWhoConstants.BASE_PATH_URL + '/' + $('#request-url').val();
            var requestType = $('#request-type').val();
            var requestData = restEditor.getValue();
            var builderAuthenticationToken = null;

            // Create a header for the tenant id
            var headers = ManyWhoAjax.createHeader(null, 'ManyWhoTenant', ManyWhoSharedServices.getTenantId());

            // If we're running a runtime rest call, we use the user credentials stored on this page
            if (requestUrl.indexOf('api/run/1') >= 0) {
                // Grab the builder authentication token
                builderAuthenticationToken = ManyWhoSharedServices.getAuthenticationToken();

                // Reset the token to the one provided by the runtime login
                ManyWhoSharedServices.setAuthenticationToken($('#manywho-user-authentication-token').val());
            }

            try {
                ManyWhoAjax.callRestApi('REST.executeREST', requestUrl, requestType, requestData, null, executeRESTSuccess, null, headers);
            } catch (e) {
                // Don't do anything, we just want to make sure the authentication token gets set back no matter what
            }

            if (requestUrl.indexOf('api/run/1') >= 0) {
                // Set the account credentials back
                ManyWhoSharedServices.setAuthenticationToken(builderAuthenticationToken);
            }
        }

        function executeRESTSuccess(data, status, xhr) {
            // We do a little work on the rest response to help the developer with various identifiers
            if (data != null) {
                // Check to make sure we're dealing with an individual object and not an array
                if (Object.prototype.toString.call(data) === '[object Array]' == false) {
                    // Check to see if the data contains an editing session id
                    if (data.hasOwnProperty('editingToken')) {
                        setEditingToken(data.editingToken);
                    }

                    // Check to see if this is a flow object, and if so, grab the id - we do that by checking for the isActive property
                    if (data.hasOwnProperty('isActive')) {
                        setFlowId(data.id.id);
                    }
                }

                // Refresh the type ahead urls
                refreshTypeAheadSource();
            }

            restResponse.setValue(JSON.stringify(data, undefined, 2));
            restResponse.gotoLine(0);
        }

        function refreshTypeAheadSource() {
            var autocomplete = null;
            var source = null;

            source = [
                    'api/run/1/authentication',
                    'api/run/1/flow/name/{flowName}',
                    'api/run/1/flow/' + getFlowId(),
                    'api/run/1/flow',
                    'api/run/1/response',
                    'api/run/1/state/{stateId}',
                    'api/run/1',
                    'api/draw/1/flow/snap/' + getFlowId(),
                    'api/draw/1/flow',
                    'api/draw/1/flow/' + getFlowId(),
                    'api/draw/1/flow/' + getFlowId() + '/service/{serviceId}',
                    'api/draw/1/element/service/{serviceId}',
                    'api/draw/1/element/service?filter=',
                    'api/draw/1/element/service',
                    'api/draw/1/flow/' + getFlowId() + '/type/{typeId}',
                    'api/draw/1/element/type/{typeId}',
                    'api/draw/1/element/type?filter=',
                    'api/draw/1/element/type',
                    'api/draw/1/flow/' + getFlowId() + '/value/{valueId}',
                    'api/draw/1/element/value/{valueId}',
                    'api/draw/1/element/value?filter=',
                    'api/draw/1/element/value',
                    'api/draw/1/flow/' + getFlowId() + '/tag/{tagId}',
                    'api/draw/1/element/tag/{tagId}',
                    'api/draw/1/element/tag?filter=',
                    'api/draw/1/element/tag',
                    'api/draw/1/flow/' + getFlowId() + '/page/{pageId}',
                    'api/draw/1/element/page/{pageId}',
                    'api/draw/1/element/page?filter=',
                    'api/draw/1/element/page',
                    'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map/{mapElementId}',
                    'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map?filter=',
                    'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map',
                    'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group/{groupElementId}',
                    'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group?filter=',
                    'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group'
                ];

            autocomplete = $('#request-url').typeahead();
            autocomplete.data('typeahead').source = source;
        }
        // Order of operations are
        // 1. Developer types in url
        //    If the URL is not found, we populate all request types and we do not auto fill any information
        // 2. Url is selected from list which populates the request types with any options
        //    If only one request type is available, that one is selected and the editor is populated
        //    If more than one request type is available, the developer selects one and this grabs the correct JSON template
        //
        function grabJSONForRequest() {
            var requestUrl = $('#request-url').val();
            var requestType = $('#request-type').val();
            var requestContent = null;

            // Start by blanking the request content
            requestContent = '';

            if (requestUrl == 'api/run/1/authentication') {
                // action = "Login"
                requestContent += '{\n';
                requestContent += '  "loginUrl":null,\n';
                requestContent += '  "username":null,\n';
                requestContent += '  "password":null,\n';
                requestContent += '  "token":null\n';
                requestContent += '}';
            } else if (requestUrl.indexOf('api/run/1/flow/name/') == 0) {
                // action = "LoadFlowByName"
                requestContent = '';
            } else if (requestUrl.indexOf('api/run/1/flow/') == 0) {
                // action = "LoadFlowById"
                requestContent = '';
            } else if (requestUrl == 'api/run/1/flow') {
                // action = "LoadAllFlows"
                requestContent = '';
            } else if (requestUrl == 'api/run/1/response') {
                // action = "Response"
                requestContent += '{\n';
                requestContent += '  "stateToken":null,\n';
                requestContent += '  "tenantId":"' + getTenantId() + '",\n';
                requestContent += '  "invokeType":"FORWARD",\n';
                requestContent += '  "waitMessage":"Please wait while our services does a bunch of work.",\n';
                requestContent += '  "outputs":[\n';
                requestContent += '    {\n';
                requestContent += '      "id":null,\n';
                requestContent += '      "typeElementId":null,\n';
                requestContent += '      "typeElementPropertyId":null,\n';
                requestContent += '      "developerName":null,\n';
                requestContent += '      "typeElementDeveloperName":null,\n';
                requestContent += '      "typeElementPropertyDeveloperName":null,\n';
                requestContent += '      "contentValue":null,\n';
                requestContent += '      "contentType":null,\n';
                requestContent += '      "objectData":null\n';
                requestContent += '    }\n';
                requestContent += '  ],\n';
                requestContent += '  "culture":null,\n';
                requestContent += '  "rootFaults":null,\n';
                requestContent += '  "valueFaults":null,\n';
                requestContent += '  "annotations":null\n';
                requestContent += '}';
            } else if (requestUrl.indexOf('api/run/1/state/') == 0) {
                // action = "Join" or "Execute"
                if (requestType == 'GET') {
                    requestContent = '';
                } else {
                    requestContent += '{\n';
                    requestContent += '  "stateId":null,\n';
                    requestContent += '  "stateToken":null,\n';
                    requestContent += '  "currentMapElementId":null,\n';
                    requestContent += '  "invokeType":"FORWARD",\n';
                    requestContent += '  "annotations":null,\n';
                    requestContent += '  "geoLocation":{\n';
                    requestContent += '    "latitude":0,\n';
                    requestContent += '    "longitude":0,\n';
                    requestContent += '    "accuracy":0,\n';
                    requestContent += '    "altitude":0,\n';
                    requestContent += '    "altitudeAccuracy":0,\n';
                    requestContent += '    "heading":0,\n';
                    requestContent += '    "speed":0\n';
                    requestContent += '  },\n';
                    requestContent += '  "mapElementInvokeRequest":{\n';
                    requestContent += '    "selectedOutcomeId":null\n';
                    requestContent += '  },\n';
                    requestContent += '  "mode":null\n';
                    requestContent += '}';
                }
            } else if (requestUrl == 'api/run/1') {
                // action = "Initialize"
                requestContent += '{\n';
                requestContent += '  "flowId":{\n';
                requestContent += '    "id":"' + getFlowId() + '",\n';
                requestContent += '    "versionId":"need to provide the version"\n';
                requestContent += '  },\n';
                requestContent += '  "annotations":null,\n';
                requestContent += '  "inputs":[\n';
                requestContent += '    {\n';
                requestContent += '      "id":null,\n';
                requestContent += '      "typeElementId":null,\n';
                requestContent += '      "typeElementPropertyId":null,\n';
                requestContent += '      "developerName":null,\n';
                requestContent += '      "typeElementDeveloperName":null,\n';
                requestContent += '      "typeElementPropertyDeveloperName":null,\n';
                requestContent += '      "contentValue":null,\n';
                requestContent += '      "contentType":null,\n';
                requestContent += '      "objectData":null\n';
                requestContent += '    }\n';
                requestContent += '  ],\n';
                requestContent += '  "mode":null\n';
                requestContent += '}';
            } else if (requestUrl.indexOf('api/draw/1/flow/snap/') == 0) {
                // action = "SnapShotFlow"
                requestContent += '';
            } else if (requestUrl == 'api/draw/1/flow') {
                // action = "GetFlows"
                requestContent = '';
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/service/') == 0) {
                // action = "AddServiceElementToFlow"
                requestContent += '';
            } else if (requestUrl.indexOf('api/draw/1/element/service/') == 0) {
                // controller = "LoadServiceElement" or "DeleteServiceElement"
                requestContent = '';
            } else if (requestUrl == 'api/draw/1/element/service?filter=') {
                // action = "LoadServiceElements"
                requestContent += '';
            } else if (requestUrl == 'api/draw/1/element/service') {
                // action = "SaveServiceElement"
                requestContent += ManyWhoDeveloper.createElementJSONTemplate(ManyWhoConstants.SERVICE_ELEMENT_TYPE_IMPLEMENTATION_SERVICE);
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/type/') == 0) {
                // action = "AddTypeElementToFlow"
                requestContent += '';
            } else if (requestUrl.indexOf('api/draw/1/element/type/') == 0) {
                // controller = "LoadTypeElement" or "DeleteTypeElement"
                requestContent = '';
            } else if (requestUrl == 'api/draw/1/element/type?filter=') {
                // action = "LoadTypeElements"
                requestContent += '';
            } else if (requestUrl == 'api/draw/1/element/type') {
                // action = "SaveTypeElement"
                requestContent += ManyWhoDeveloper.createElementJSONTemplate(ManyWhoConstants.TYPE_ELEMENT_TYPE_IMPLEMENTATION_TYPE);
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/value/') == 0) {
                // action = "AddValueElementToFlow"
                requestContent += '';
            } else if (requestUrl.indexOf('api/draw/1/element/value/') == 0) {
                // controller = "LoadValueElement" or "DeleteValueElement"
                requestContent = '';
            } else if (requestUrl == 'api/draw/1/element/value?filter=') {
                // action = "LoadValueElements"
                requestContent += '';
            } else if (requestUrl == 'api/draw/1/element/value') {
                // action = "SaveValueElement"
                requestContent += ManyWhoDeveloper.createElementJSONTemplate(ManyWhoConstants.SHARED_ELEMENT_TYPE_IMPLEMENTATION_VARIABLE);
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/tag/') == 0) {
                // action = "AddTagElementToFlow"
                requestContent += '';
            } else if (requestUrl.indexOf('api/draw/1/element/tag/') == 0) {
                // controller = "LoadTagElement" or "DeleteTagElement"
                requestContent = '';
            } else if (requestUrl == 'api/draw/1/element/tag?filter=') {
                // action = "LoadTagElements"
                requestContent += '';
            } else if (requestUrl == 'api/draw/1/element/tag') {
                // action = "SaveTagElement"
                requestContent += ManyWhoDeveloper.createElementJSONTemplate(ManyWhoConstants.UI_ELEMENT_TYPE_IMPLEMENTATION_TAG);
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/page/') == 0) {
                // action = "AddPageElementToFlow"
                requestContent += '';
            } else if (requestUrl.indexOf('api/draw/1/element/page/') == 0) {
                // controller = "LoadPageElement" or "DeletePageElement"
                requestContent = '';
            } else if (requestUrl == 'api/draw/1/element/page?filter=') {
                // action = "LoadPageElements"
                requestContent += '';
            } else if (requestUrl == 'api/draw/1/element/page') {
                // action = "SavePageElement"
                requestContent += ManyWhoDeveloper.createElementJSONTemplate(ManyWhoConstants.UI_ELEMENT_TYPE_IMPLEMENTATION_PAGE_LAYOUT);
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map/') == 0) {
                // action = "LoadMapElement" or "DeleteMapElement"
                requestContent = '';
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map?filter=') == 0) {
                // action = "LoadMapElements"
                requestContent = '';
            } else if (requestUrl == 'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map') {
                // action = "SaveMapElement"
                requestContent += ManyWhoDeveloper.createElementJSONTemplate(ManyWhoConstants.MAP_ELEMENT_TYPE_IMPLEMENTATION_STEP);
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group/') == 0) {
                // action = "LoadGroupElement" or "DeleteGroupElement"
                requestContent = '';
            } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group?filter=') == 0) {
                // action = "LoadGroupElements"
                requestContent = '';
            } else if (requestUrl == 'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group') {
                // action = "SaveGroupElement"
                requestContent += ManyWhoDeveloper.createElementJSONTemplate(ManyWhoConstants.GROUP_ELEMENT_TYPE_IMPLEMENTATION_SWIMLANE);
            } else if (requestUrl.indexOf('api/draw/1/flow/') == 0) {
                // action = "GetFlowById"
                requestContent = '';
            }

            restEditor.setValue(requestContent);
            restEditor.gotoLine(0);
        }

        // Set the runtime user authentication token separately so we can operate as a runtime user
        function runtimeSignIn() {
            var builderAuthenticationToken = null;

            // Grab the builder authentication token
            builderAuthenticationToken = ManyWhoSharedServices.getAuthenticationToken();

            // Blank out authentication - were not logged in as a user if we click this button
            ManyWhoSharedServices.setAuthenticationToken('');

            ManyWhoSharedServices.showAuthenticationDialog(function (authenticationToken, manywhoTenantId) {
                // Set the tenant id in the UI
                $('#manywho-user-authentication-token').val(authenticationToken);

                // Set the authentication back
                ManyWhoSharedServices.setAuthenticationToken(builderAuthenticationToken);
            },
            ManyWhoSharedServices.getTenantId());
        }

        function openHelpDocumentation() {
            window.open('http://manywho.com/wp-content/content/docs/index.html');
        }

        $(document).ready(function () {
            var authenticationToken = null;
            var manywhoTenantId = null;

            // Grab any existing information from the cookie
            authenticationToken = ManyWhoUtils.getCookie('authentication-token');
            manywhoTenantId = ManyWhoUtils.getCookie('tenant-id');

            // Set the page information to that stored in the cookie (as they user may have logged into the designer already or refreshed the page
            ManyWhoSharedServices.setAuthenticationToken(authenticationToken);
            ManyWhoSharedServices.setTenantId(manywhoTenantId);

            // Set the tenant id in the UI
            $('#manywho-tenant-id').html(manywhoTenantId);

            // Check he authentication situation - also the tenant (we need both from authentication)
            if (authenticationToken == null ||
                authenticationToken.trim().length == 0 ||
                manywhoTenantId == null ||
                manywhoTenantId.trim().length == 0) {
                // Show the authentication dialog as the user has not logged in
                ManyWhoSharedServices.showAuthenticationDialog(function (authenticationToken, manywhoTenantId) {
                    ManyWhoSharedServices.setAuthenticationToken(authenticationToken);
                    ManyWhoSharedServices.setTenantId(manywhoTenantId);

                    // Set the tenant id in the UI
                    $('#manywho-tenant-id').html(manywhoTenantId);

                    // Set the authentication token into the cookie also
                    ManyWhoUtils.setCookie('authentication-token', authenticationToken);
                    ManyWhoUtils.setCookie('tenant-id', manywhoTenantId);
                },
                ManyWhoSharedServices.getTenantId());
            }

            // Create the REST code editor for working against the ManyWho APIs
            restEditor = ace.edit("rest-editor");
            restEditor.setTheme("ace/theme/monokai");
            restEditor.getSession().setMode("ace/mode/javascript");

            // Create the response editor to view the API responses
            restResponse = ace.edit("rest-response");
            restResponse.setTheme("ace/theme/monokai");
            restResponse.getSession().setMode("ace/mode/javascript");
            restResponse.setReadOnly(true);

            // Create the player code editor for working with the player UI
            playerEditor = ace.edit("player-editor");
            playerEditor.setTheme("ace/theme/monokai");
            playerEditor.getSession().setMode("ace/mode/javascript");
            playerEditor.getSession().setMode("ace/mode/html");

            // Initialize shared services we need to standard operations
            ManyWhoSharedServices.initialize('shared-services');

            // Grab the authentication token from the authentication cookie
            ManyWhoSharedServices.setAuthenticationToken(ManyWhoUtils.getCookie('authentication-token'));

            // Grab the tenant id from the cookie
            ManyWhoSharedServices.setTenantId(ManyWhoUtils.getCookie('tenant-id'));

            // Create the type ahead
            $('#request-url').typeahead();

            // Grab any flow data from url in case this was opened from the draw tool
            setFlowId(ManyWhoUtils.getQueryStringParam('flow-id'));
            setEditingToken(ManyWhoUtils.getQueryStringParam('editing-session-id'));

            // Refresh the source of the typeahead
            refreshTypeAheadSource();

            $('#request-url').blur(function () {
                var requestUrl = $('#request-url').val();

                if (requestUrl == 'api/run/1/authentication') {
                    // action = "Login"
                    // POST only
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl.indexOf('api/run/1/flow/name/') == 0) {
                    // action = "LoadFlowByName"
                    // GET only
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl.indexOf('api/run/1/flow/') == 0) {
                    // action = "LoadFlowById"
                    // GET only
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl == 'api/run/1/flow') {
                    // action = "LoadAllFlows"
                    // GET only
                    $('#request-type').html('');
                    $('#request-type').html('<option value="GET">GET</option>');
                } else if (requestUrl == 'api/run/1/response') {
                    // action = "Response"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl.indexOf('api/run/1/state/') == 0) {
                    // action = "Join" or "Execute"
                    // GET OR POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl == 'api/run/1') {
                    // action = "Initialize"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl.indexOf('api/draw/1/flow/snap/') == 0) {
                    // action = "SnapShotFlow"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl == 'api/draw/1/flows') {
                    // action = "GetFlows"
                    // GET only
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');

                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/service/') == 0) {
                    // action = "AddServiceElementToFlow"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl == 'api/draw/1/element/service?filter=') {
                    // action = "LoadServiceElements"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl.indexOf('api/draw/1/element/service/') == 0) {
                    // controller = "LoadServiceElement" of "DeleteServiceElement"
                    // GET AND DELETE ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                } else if (requestUrl == 'api/draw/1/element/service') {
                    // action = "SaveServiceElement"
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');

                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/type/') == 0) {
                    // action = "AddTypeElementToFlow"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl == 'api/draw/1/element/type?filter=') {
                    // action = "LoadTypeElements"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl.indexOf('api/draw/1/element/type/') == 0) {
                    // controller = "LoadTypeElement" of "DeleteTypeElement"
                    // GET AND DELETE ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                } else if (requestUrl == 'api/draw/1/element/type') {
                    // action = "SaveTypeElement"
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');

                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/value/') == 0) {
                    // action = "AddValueElementToFlow"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl == 'api/draw/1/element/value?filter=') {
                    // action = "LoadValueElements"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl.indexOf('api/draw/1/element/value/') == 0) {
                    // controller = "LoadValueElement" of "DeleteValueElement"
                    // GET AND DELETE ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                } else if (requestUrl == 'api/draw/1/element/value') {
                    // action = "SaveTypeElement"
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');

                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/tag/') == 0) {
                    // action = "AddTagElementToFlow"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl == 'api/draw/1/element/tag?filter=') {
                    // action = "LoadTagElements"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl.indexOf('api/draw/1/element/tag/') == 0) {
                    // controller = "LoadTagElement" of "DeleteTagElement"
                    // GET AND DELETE ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                } else if (requestUrl == 'api/draw/1/element/tag') {
                    // action = "SaveTagElement"
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');

                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/page/') == 0) {
                    // action = "AddPageElementToFlow"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');
                } else if (requestUrl == 'api/draw/1/element/page?filter=') {
                    // action = "LoadPageElements"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl.indexOf('api/draw/1/element/page/') == 0) {
                    // controller = "LoadPageElement" of "DeletePageElement"
                    // GET AND DELETE ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                } else if (requestUrl == 'api/draw/1/element/page') {
                    // action = "SavePageElement"
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');

                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map/') == 0) {
                    // action = "LoadMapElement" or "DeleteMapElement"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map?filter=') == 0) {
                    // action = "LoadMapElements"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl == 'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/map') {
                    // action = "SaveMapElement"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');

                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group/') == 0) {
                    // action = "LoadGroupElement" or "DeleteGroupElement"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                } else if (requestUrl.indexOf('api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group?filter=') == 0) {
                    // action = "LoadGroupElements"
                    // GET ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                } else if (requestUrl == 'api/draw/1/flow/' + getFlowId() + '/' + getEditingToken() + '/element/group') {
                    // action = "SaveGroupElement"
                    // POST ONLY
                    $('#request-type').html('');
                    $('#request-type').append('<option value="POST">POST</option>');

                } else {
                    // We don't know the url, so we populate all of the parameters for request type
                    $('#request-type').html('');
                    $('#request-type').append('<option value="GET">GET</option>');
                    $('#request-type').append('<option value="PUT">PUT</option>');
                    $('#request-type').append('<option value="POST">POST</option>');
                    $('#request-type').append('<option value="DELETE">DELETE</option>');
                }
            });
        });

    </script>
</head>
<body>
    <div id="logo">
        <img src="../images/developer_tools_logo.png" height="60" width="233" alt="ManyWho Developer Tools" />
        <div class="pull-right" style="color: #ffffff;">
            Tenant Id: <strong><span id="manywho-tenant-id">Unknown</span></strong>
        </div>
    </div>

    <div class="tabbable">
        <ul class="nav nav-tabs" id="tools-tabs">
            <li class="active"><a href="#rest-tab" data-toggle="tab">JSON API</a></li>
            <li><a href="#player-tab" data-toggle="tab">Players</a></li>
        </ul>
 
        <div class="tab-content">
          <div class="tab-pane active" id="rest-tab">
            <div>
              <div class="input-append input-prepend" id="rest-toolbar">
                <button class="btn btn-warning" type="button" onclick="javascript:openHelpDocumentation();">?</button>
                <input class="span5" id="request-url" type="text" placeholder="Where do you want to make the request?" />
                <select id="request-type" class="span2">
                  <option value="GET">GET</option>
                  <option value="PUT">PUT</option>
                  <option value="POST">POST</option>
                  <option value="DELETE">DELETE</option>
                </select>
                <button class="btn btn-primary" type="button" onclick="javascript:grabJSONForRequest();"><i class="icon-align-left icon-white"></i> Grab JSON</button>
                <button class="btn btn-info" type="button" onclick="javascript:runtimeSignIn();"><i class="icon-user icon-white"></i> Runtime Sign In</button>
                <button class="btn btn-danger" type="button" onclick="javascript:executeREST();"><i class="icon-play icon-white"></i> Run Command</button>
              </div>
            </div>
            <div id="rest-editor"></div>
            <div id="rest-response"></div>
          </div>
          <div class="tab-pane" id="player-tab">
            <div>
              <div class="input-append input-prepend" id="player-toolbar">
                <button class="btn btn-warning" type="button">?</button>
                <button class="btn btn-success" type="button" onclick="javascript:alert('to do');"><i class="icon-search icon-white"></i> Select Existing</button>
                <input class="span5" id="player-name" type="text" placeholder="What do you want the player path to be?" />
                <button class="btn btn-danger" type="button" onclick="javascript:executePlayerRequest();"><i class="icon-upload icon-white"></i> Save Player</button>
              </div>
            </div>
            <div id="player-editor"></div>
          </div>
        </div>

    </div>

    <div id="shared-services"></div>

    <input id="manywho-flow-id" type="hidden" />
    <input id="manywho-editing-session-id" type="hidden" />
    <input id="manywho-user-authentication-token" type="hidden" />

</body>
</html>
